// Autogenerated from Pigeon (v14.0.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon

import Foundation
#if os(iOS)
import Flutter
#elseif os(macOS)
import FlutterMacOS
#else
#error("Unsupported platform.")
#endif

private func wrapResult(_ result: Any?) -> [Any?] {
  return [result]
}

private func wrapError(_ error: Any) -> [Any?] {
  if let flutterError = error as? FlutterError {
    return [
      flutterError.code,
      flutterError.message,
      flutterError.details
    ]
  }
  return [
    "\(error)",
    "\(type(of: error))",
    "Stacktrace: \(Thread.callStackSymbols)"
  ]
}

private func isNullish(_ value: Any?) -> Bool {
  return value is NSNull || value == nil
}

private func nilOrValue<T>(_ value: Any?) -> T? {
  if value is NSNull { return nil }
  return value as! T?
}

enum NotificationTriggerType: Int {
  case timeInterval = 0
  case dateComponents = 1
}

/// Generated class from Pigeon that represents data sent in messages.
struct NotificationRequest {
  var identifier: String
  var content: NotificationContent
  var trigger: NotificationTrigger? = nil

  static func fromList(_ list: [Any?]) -> NotificationRequest? {
    let identifier = list[0] as! String
    let content = NotificationContent.fromList(list[1] as! [Any?])!
    var trigger: NotificationTrigger? = nil
    if let triggerList: [Any?] = nilOrValue(list[2]) {
      trigger = NotificationTrigger.fromList(triggerList)
    }

    return NotificationRequest(
      identifier: identifier,
      content: content,
      trigger: trigger
    )
  }
  func toList() -> [Any?] {
    return [
      identifier,
      content.toList(),
      trigger?.toList(),
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct NotificationContent {
  var title: String
  var body: String

  static func fromList(_ list: [Any?]) -> NotificationContent? {
    let title = list[0] as! String
    let body = list[1] as! String

    return NotificationContent(
      title: title,
      body: body
    )
  }
  func toList() -> [Any?] {
    return [
      title,
      body,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct NotificationDateComponents {
  var year: Int64? = nil
  var month: Int64? = nil
  var day: Int64? = nil
  var hour: Int64? = nil
  var minute: Int64? = nil
  var second: Int64? = nil
  var weekday: Int64? = nil

  static func fromList(_ list: [Any?]) -> NotificationDateComponents? {
    let year: Int64? = isNullish(list[0]) ? nil : (list[0] is Int64? ? list[0] as! Int64? : Int64(list[0] as! Int32))
    let month: Int64? = isNullish(list[1]) ? nil : (list[1] is Int64? ? list[1] as! Int64? : Int64(list[1] as! Int32))
    let day: Int64? = isNullish(list[2]) ? nil : (list[2] is Int64? ? list[2] as! Int64? : Int64(list[2] as! Int32))
    let hour: Int64? = isNullish(list[3]) ? nil : (list[3] is Int64? ? list[3] as! Int64? : Int64(list[3] as! Int32))
    let minute: Int64? = isNullish(list[4]) ? nil : (list[4] is Int64? ? list[4] as! Int64? : Int64(list[4] as! Int32))
    let second: Int64? = isNullish(list[5]) ? nil : (list[5] is Int64? ? list[5] as! Int64? : Int64(list[5] as! Int32))
    let weekday: Int64? = isNullish(list[6]) ? nil : (list[6] is Int64? ? list[6] as! Int64? : Int64(list[6] as! Int32))

    return NotificationDateComponents(
      year: year,
      month: month,
      day: day,
      hour: hour,
      minute: minute,
      second: second,
      weekday: weekday
    )
  }
  func toList() -> [Any?] {
    return [
      year,
      month,
      day,
      hour,
      minute,
      second,
      weekday,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct NotificationTrigger {
  var repeats: Bool
  var timeInterval: Int64? = nil
  var dateComponents: NotificationDateComponents? = nil
  var type: NotificationTriggerType

  static func fromList(_ list: [Any?]) -> NotificationTrigger? {
    let repeats = list[0] as! Bool
    let timeInterval: Int64? = isNullish(list[1]) ? nil : (list[1] is Int64? ? list[1] as! Int64? : Int64(list[1] as! Int32))
    var dateComponents: NotificationDateComponents? = nil
    if let dateComponentsList: [Any?] = nilOrValue(list[2]) {
      dateComponents = NotificationDateComponents.fromList(dateComponentsList)
    }
    let type = NotificationTriggerType(rawValue: list[3] as! Int)!

    return NotificationTrigger(
      repeats: repeats,
      timeInterval: timeInterval,
      dateComponents: dateComponents,
      type: type
    )
  }
  func toList() -> [Any?] {
    return [
      repeats,
      timeInterval,
      dateComponents?.toList(),
      type.rawValue,
    ]
  }
}

private class LocalNotificationWithAppleCodecReader: FlutterStandardReader {
  override func readValue(ofType type: UInt8) -> Any? {
    switch type {
      case 128:
        return NotificationContent.fromList(self.readValue() as! [Any?])
      case 129:
        return NotificationDateComponents.fromList(self.readValue() as! [Any?])
      case 130:
        return NotificationRequest.fromList(self.readValue() as! [Any?])
      case 131:
        return NotificationRequest.fromList(self.readValue() as! [Any?])
      case 132:
        return NotificationTrigger.fromList(self.readValue() as! [Any?])
      default:
        return super.readValue(ofType: type)
    }
  }
}

private class LocalNotificationWithAppleCodecWriter: FlutterStandardWriter {
  override func writeValue(_ value: Any) {
    if let value = value as? NotificationContent {
      super.writeByte(128)
      super.writeValue(value.toList())
    } else if let value = value as? NotificationDateComponents {
      super.writeByte(129)
      super.writeValue(value.toList())
    } else if let value = value as? NotificationRequest {
      super.writeByte(130)
      super.writeValue(value.toList())
    } else if let value = value as? NotificationRequest {
      super.writeByte(131)
      super.writeValue(value.toList())
    } else if let value = value as? NotificationTrigger {
      super.writeByte(132)
      super.writeValue(value.toList())
    } else {
      super.writeValue(value)
    }
  }
}

private class LocalNotificationWithAppleCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return LocalNotificationWithAppleCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return LocalNotificationWithAppleCodecWriter(data: data)
  }
}

class LocalNotificationWithAppleCodec: FlutterStandardMessageCodec {
  static let shared = LocalNotificationWithAppleCodec(readerWriter: LocalNotificationWithAppleCodecReaderWriter())
}

/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol LocalNotificationWithApple {
  /// 添加通知请求
  func add(request: NotificationRequest) throws
  /// 移除指定pengding状态的通知
  func removePendingNotificationRequests(identifiers: [String]) throws
  /// 移除pengding状态的通知
  func removeAllPendingNotificationRequests() throws
  /// 获取所有pengding状态的通知
  func getPendingNotificationRequests(completion: @escaping (Result<[NotificationRequest], Error>) -> Void)
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class LocalNotificationWithAppleSetup {
  /// The codec used by LocalNotificationWithApple.
  static var codec: FlutterStandardMessageCodec { LocalNotificationWithAppleCodec.shared }
  /// Sets up an instance of `LocalNotificationWithApple` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: LocalNotificationWithApple?) {
    /// 添加通知请求
    let addChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.local_notification_with_apple.LocalNotificationWithApple.add", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      addChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let requestArg = args[0] as! NotificationRequest
        do {
          try api.add(request: requestArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      addChannel.setMessageHandler(nil)
    }
    /// 移除指定pengding状态的通知
    let removePendingNotificationRequestsChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.local_notification_with_apple.LocalNotificationWithApple.removePendingNotificationRequests", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      removePendingNotificationRequestsChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let identifiersArg = args[0] as! [String]
        do {
          try api.removePendingNotificationRequests(identifiers: identifiersArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      removePendingNotificationRequestsChannel.setMessageHandler(nil)
    }
    /// 移除pengding状态的通知
    let removeAllPendingNotificationRequestsChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.local_notification_with_apple.LocalNotificationWithApple.removeAllPendingNotificationRequests", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      removeAllPendingNotificationRequestsChannel.setMessageHandler { _, reply in
        do {
          try api.removeAllPendingNotificationRequests()
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      removeAllPendingNotificationRequestsChannel.setMessageHandler(nil)
    }
    /// 获取所有pengding状态的通知
    let getPendingNotificationRequestsChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.local_notification_with_apple.LocalNotificationWithApple.getPendingNotificationRequests", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getPendingNotificationRequestsChannel.setMessageHandler { _, reply in
        api.getPendingNotificationRequests() { result in
          switch result {
            case .success(let res):
              reply(wrapResult(res))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      getPendingNotificationRequestsChannel.setMessageHandler(nil)
    }
  }
}
